"""
Structure represents the basic element of the struct-ure knowledge graph.
"""
type Structure @generate(
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: false,
        delete: false,
        update: false
    },
    subscription: false
) {
    id: String! @id @search(by: [regexp])

    "The label of the Structure, for instance in use in UI"
    label: [MultilingualText!]!

    "The name of the Structure"
    name: [MultilingualText!]!

    "The description of the Structure"
    description: [MultilingualText!]

    "Alternate names of the Structure"
    aliases: [MultilingualAlias!] @hasInverse(field:entity)

    "The Wikidata entity ID for this Structure"
    wdID: String @search(by: [exact])

    "A URL for more information about the Structure"
    url: String @search(by: [fulltext, regexp])

    "The ID of the prior Structure, if this Structure was relocated/renamed in the graph"
    priorID: String @search(by: [exact])

    "Categories associated with this Structure"
    typeOf: [Structure!]

    "Related Structures"
    related: [Structure!]

    "Taxonomist's notes"
    notes: String @search(by: [fulltext])

    "The calculated display position"
    rank: Int @search

    "The Stack Overflow tag"
    stackOverflowTag: String @search(by: [exact])

    "The Structure's parent in the tree"
    parent: Structure
    
    "Children of this Structure"
    children: [Structure!] @hasInverse(field: parent)
}

"""
MultilingualText represents a structure text values represented in one or more written languages
"""
type MultilingualText @generate(
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: false,
        delete: false,
        update: false
    },
    subscription: false
) {
    "The language identifier"
    lang: String! @search(by: [exact])
    "The actual value"
    value: String! @search(by: [exact, term, fulltext, regexp])
}

"""
MultilingualAlias represents a number of alias text values represented in one or more written languages
"""
type MultilingualAlias @generate(
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: false,
        delete: false,
        update: false
    },
    subscription: false
) {
    "The language identifier"
    lang: String! @search(by: [exact])
    "The actual value"
    values: [String!]! @search(by: [exact, term, fulltext, regexp])
}

"""
Version represents the version and other details of the graph.
"""
type Version @generate(
    query: {
        get: false,
        query: true,
        aggregate: false
    },
    mutation: {
        add: false,
        delete: false,
        update: false
    },
    subscription: false
) {
    version: String
    timestamp: DateTime
    notices: String
}

type Aggregate {
    count: Int
}

type Query {

  aggregateStructureByTerm(term: String!): Aggregate @custom(dql: """
    query q($term: string) {
        LABELS as var(func: type(Structure)) @cascade {
            Structure.label @filter(anyofterms(MultilingualText.value, $term)) {
                uid
            }
        }
        NAMES as var(func: type(Structure)) @cascade {
            Structure.name @filter(anyofterms(MultilingualText.value, $term)) {
                uid
            }
        }
        ALIASES as var(func: type(Structure)) @cascade {
            Structure.aliases @filter(anyofterms(MultilingualAlias.values, $term)) {
                uid
            }
        }
        aggregateStructureByTerm(func: uid(LABELS, NAMES, ALIASES)) {
            count: count(uid)
        }
    }
  """)

  queryStructureByTerm(term: String!, first: Int=100, offset: Int=0): [Structure] @custom(dql: """
    query q($term: string, $first: int=100, $offset: int=0) {
        LABELS as var(func: type(Structure)) @cascade {
            Structure.label @filter(anyofterms(MultilingualText.value, $term)) {
                uid
            }
        }
        NAMES as var(func: type(Structure)) @cascade {
            Structure.name @filter(anyofterms(MultilingualText.value, $term)) {
                uid
            }
        }
        ALIASES as var(func: type(Structure)) @cascade {
            Structure.aliases @filter(anyofterms(MultilingualAlias.values, $term)) {
                uid
            }
        }
            
        queryStructureByTerm(func: uid(LABELS, NAMES, ALIASES), orderasc: Structure.id, first: $first, offset: $offset) {
            id: Structure.id
            wdID: Structure.wdID
            label: Structure.label {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            name: Structure.name {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            description: Structure.description {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            aliases: Structure.aliases {
                lang: MultilingualAlias.lang
                values: MultilingualAlias.values
            }
            url: Structure.url
            priorID: Structure.priorID
            typeOf: Structure.typeOf
            related: Structure.related
            notes: Structure.notes
            rank: Structure.rank
            stackOverflowTag: Structure.stackOverflowTag
            parent: Structure.parent {
                id: Structure.id
            }
        }
    }  
  """)

  aggregateStructureByTermByLang(term: String!, lang: String!): Aggregate @custom(dql: """
    query q($term: string, $lang: string) {
        LABELS as var(func: type(Structure)) @cascade {
            Structure.label @filter(anyofterms(MultilingualText.value, $term) AND eq(MultilingualText.lang, $lang))  {
                uid
            }
        }
        NAMES as var(func: type(Structure)) @cascade {
            Structure.name @filter(anyofterms(MultilingualText.value, $term) AND eq(MultilingualText.lang, $lang)) {
                uid
            }
        }
        ALIASES as var(func: type(Structure)) @cascade {
            Structure.aliases @filter(anyofterms(MultilingualAlias.values, $term) AND eq(MultilingualText.lang, $lang)) {
                uid
            }
        }
        aggregateStructureByTermByLang(func: uid(LABELS, NAMES, ALIASES)) {
            count: count(uid)
        }
    }
  """)

  queryStructureByTermByLang(term: String!, lang: String!, first: Int=100, offset: Int=0): [Structure] @custom(dql: """
    query q($term: string, $lang: string, $first: int=100, $offset: int=0) {
        LABELS as var(func: type(Structure)) @cascade {
            Structure.label @filter(anyofterms(MultilingualText.value, $term) AND eq(MultilingualText.lang, $lang)) {
                uid
            }
        }
        NAMES as var(func: type(Structure)) @cascade {
            Structure.name @filter(anyofterms(MultilingualText.value, $term) AND eq(MultilingualText.lang, $lang)) {
                uid
            }
        }
        ALIASES as var(func: type(Structure)) @cascade {
            Structure.aliases @filter(anyofterms(MultilingualAlias.values, $term) AND eq(MultilingualText.lang, $lang)) {
                uid
            }
        }
            
        queryStructureByTermByLang(func: uid(LABELS, NAMES, ALIASES), orderasc: Structure.id, first: $first, offset: $offset) {
            id: Structure.id
            wdID: Structure.wdID
            label: Structure.label {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            name: Structure.name {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            description: Structure.description {
                lang: MultilingualText.lang
                value: MultilingualText.value
            }
            aliases: Structure.aliases {
                lang: MultilingualAlias.lang
                values: MultilingualAlias.values
            }
            url: Structure.url
            priorID: Structure.priorID
            typeOf: Structure.typeOf
            related: Structure.related
            notes: Structure.notes
            rank: Structure.rank
            stackOverflowTag: Structure.stackOverflowTag
            parent: Structure.parent {
                id: Structure.id
            }
        }
    }  
  """)  

}